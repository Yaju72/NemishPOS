@page "/coffees"


<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Coffee</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddCoffeeDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Coffee Name</th>
            <th>Coffee Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var coffee in _coffees)
        {
            <tr>
                <td>@coffee.ID</td>
                <td>@coffee.CoffeeName</td>
                <td>@coffee.CoffeePrice</td>
                <td>
                    <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteCoffeeDialog(coffee)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                    <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenUpdateCoffeeDialog(coffee)">
                        <span class="oi oi-edit" /> Edit
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_showAddCoffeeDialog)
{
    <ModalDialog Title="Add Coffee" OnClose="@OnAddCoffeeDialogClose" OkLabel="Add">
        <div>
            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_coffeeName" placeholder="Coffee Name" />
                <label for="floatingInput">Coffee Name</label>
            </div>
            <div class="form-floating mb-3">
                <input type="number" class="form-control password" @bind="_coffeePrice" placeholder="Coffee Price" />
                <label for="floatingPassword">Coffee Price</label>
            </div>

            @if (!string.IsNullOrEmpty(_addCoffeeErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_addCoffeeErrorMessage" />
            }
        </div>
    </ModalDialog>
}

@if (_showUpdateCoffeeDialog)
{
    <ModalDialog Title="Update Coffee" OnClose="@OnUpdateCoffeeDialogClose" OkLabel="Update">
        <div>
            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_coffeeName" placeholder="Coffee Name" />
                <label for="floatingInput">Coffee Name</label>
            </div>
            <div class="form-floating mb-3">
                <input type="number" class="form-control password" @bind="_coffeePrice" placeholder="Coffee Price" />
                <label for="floatingPassword">Coffee Price</label>
            </div>

            @if (!string.IsNullOrEmpty(_updateCoffeeErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_updateCoffeeErrorMessage" />
            }
        </div>
    </ModalDialog>
}
@if (_showDeleteCoffeeDialog)
{
    <ModalDialog Title="Delete Coffee" OnClose="@OnDeleteCoffeeDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteCoffee.CoffeeName</strong> coffee and it''s data?</p>
        @if (!string.IsNullOrEmpty(_deleteCoffeeErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteCoffeeErrorMessage" />
        }
    </ModalDialog>
}

@if (_showPasswordConfirmationDialog)
{
    <ModalDialog Title="Confirm Update" OnClose="@OnPasswordConfirmationDialogClose" OkLabel="Confirm">
        <div>
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_passwordConfirmation" placeholder="Enter your password" />
                <label for="floatingPassword">Password</label>
            </div>

            @if (!string.IsNullOrEmpty(_passwordConfirmationErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_passwordConfirmationErrorMessage" />
            }
        </div>
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private Coffees _deleteCoffee { get; set; }
    private Coffees _updateCoffee { get; set; }

    private string _coffeeName { get; set; }
    private int _coffeePrice { get; set; }

    private bool _showAddCoffeeDialog { get; set; }
    private bool _showUpdateCoffeeDialog { get; set; }
    private bool _showDeleteCoffeeDialog { get; set; }
    private bool _showPasswordConfirmationDialog { get; set; }
    private bool passwordIsValid { get; set; }

    private string _addCoffeeErrorMessage { get; set; }
    private string _deleteCoffeeErrorMessage { get; set; }
    private string _updateCoffeeErrorMessage { get; set; }
    private string _passwordConfirmationErrorMessage { get; set; }

    private string _passwordConfirmation { get; set; }


    private List<Coffees> _coffees { get; set; }


    protected override void OnInitialized()
    {
        _coffees = CoffeeService.GetAllCoffee();
    }

    private void OpenAddCoffeeDialog()
    {
        _showAddCoffeeDialog = true;
        _coffeeName = "";
        _coffeePrice = 0;
    }

    private void OnAddCoffeeDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showAddCoffeeDialog = false;
        }
        else
        {
            try
            {
                _addCoffeeErrorMessage = "";
                _coffees = CoffeeService.AddCoffee(_coffeeName, _coffeePrice);
                _showAddCoffeeDialog = false;
            }
            catch (Exception e)
            {
                _addCoffeeErrorMessage = e.Message;
            }
        }
    }

    private void OpenUpdateCoffeeDialog(Coffees coffee)
    {
        _updateCoffee = coffee;
        _showUpdateCoffeeDialog = true;
        _coffeeName = coffee.CoffeeName;
        _coffeePrice = coffee.CoffeePrice;
    }

    private void OpenPasswordConfirmationDialog()
    {
        _showPasswordConfirmationDialog = true;
    }

    private void OnUpdateCoffeeDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showUpdateCoffeeDialog = false;
            _updateCoffee = null;
        }
        else
        {
            // enable arko euto pop up to ask for password
            OpenPasswordConfirmationDialog();
            //if password matches tala ko try execute else iscancel wala code copy

        }
    }



    private void OpenDeleteCoffeeDialog(Coffees coffee)
    {
        _deleteCoffee = coffee;
        _showDeleteCoffeeDialog = true;
    }

    private void OnDeleteCoffeeDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteCoffeeDialog = false;
            _deleteCoffee = null;
        }
        else
        {
            OpenPasswordConfirmationDialog();

        }
    }
    private void OnPasswordConfirmationDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showPasswordConfirmationDialog = false;
            _showUpdateCoffeeDialog = false;
            _showDeleteCoffeeDialog = false;
        }
        else
        {
            if (_globalState.CurrentUser != null)
                passwordIsValid = Utils.VerifyHash(_passwordConfirmation, _globalState.CurrentUser.PasswordHash);

            if (passwordIsValid && _showUpdateCoffeeDialog)
            {
                try
                {
                    _updateCoffeeErrorMessage = "";
                    _coffees = CoffeeService.UpdateCoffee(_updateCoffee.ID, _coffeeName, _coffeePrice);
                    _showPasswordConfirmationDialog = false;
                    _showUpdateCoffeeDialog = false;
                    _updateCoffee = null;
                    _passwordConfirmation = null;
                }
                catch (Exception e)
                {
                    _updateCoffeeErrorMessage = e.Message;
                    _passwordConfirmation = null;
                }
            }
            else if (passwordIsValid && _showDeleteCoffeeDialog)
            {
                try
                {
                    _deleteCoffeeErrorMessage = "";
                    _coffees = CoffeeService.DeleteCoffee(_deleteCoffee.ID);
                    _showPasswordConfirmationDialog = false;
                    _showDeleteCoffeeDialog = false;
                    _deleteCoffee = null;
                    _passwordConfirmation = null;
                }
                catch (Exception e)
                {
                    _deleteCoffeeErrorMessage = e.Message;
                    _passwordConfirmation = null;
                }
            }
            else
            {
                _passwordConfirmationErrorMessage = "Password is invalid!";
                _passwordConfirmation = null;
            }
        }
    }
}

